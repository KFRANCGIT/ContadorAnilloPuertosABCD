CCS PCH C Compiler, Version 5.012, 41559               05-abr.-17 01:02

               Filename:   D:\OneDrive\INGENIERIA TELEMATICA\4° Semestre\Sistemas Embebidos\PRACTICAS PROGRAMACION\ContadorAnilloPuertosABCD\ISR_TMR.lst

               ROM used:   378 bytes (1%)
                           Largest free fragment is 65154
               RAM used:   31 (1%) at main() level
                           31 (1%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   00CC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  00,0E
0003C:  MOVFF  01,0F
00040:  MOVFF  02,10
00044:  MOVFF  03,11
00048:  BTFSS  FF2.5
0004A:  GOTO   0054
0004E:  BTFSC  FF2.2
00050:  GOTO   0096
00054:  MOVFF  0E,00
00058:  MOVFF  0F,01
0005C:  MOVFF  10,02
00060:  MOVFF  11,03
00064:  MOVFF  0C,FE9
00068:  MOVFF  07,FEA
0006C:  BSF    07.7
0006E:  MOVFF  08,FE1
00072:  MOVFF  09,FE2
00076:  MOVFF  0A,FD9
0007A:  MOVFF  0B,FDA
0007E:  MOVFF  12,FF3
00082:  MOVFF  13,FF4
00086:  MOVFF  14,FFA
0008A:  MOVF   04,W
0008C:  MOVFF  06,FE0
00090:  MOVFF  05,FD8
00094:  RETFIE 0
.................... #include <18f4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
....................  
.................... #list 
....................  
.................... #use delay(clock=16M) 
.................... #fuses XT, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use FAST_IO(A) 
.................... #use FAST_IO(B) 
.................... #use FAST_IO(C) 
.................... #use FAST_IO(D) 
....................  
....................  
.................... //Variables Globales 
.................... int8 contador1 = 0; //Conteo de puerto A 100 ms 
.................... int8 contador2 = 0; //Conteo de puerto B 500 ms 
.................... int8 contador3 = 0; //Conteo de puerto C 1000 ms 
.................... int8 contador4 = 0; //Conteo de puerto D 1500 ms 
....................  
.................... unsigned int8 anilloA = 1; 
.................... unsigned int8 anilloB = 1; 
.................... unsigned int8 anilloC = 1; 
.................... unsigned int8 anilloD = 1; 
....................  
.................... int1 banderaA = 0; 
.................... int1 banderaB = 0; 
.................... int1 banderaC = 0; 
.................... int1 banderaD = 0; 
....................  
.................... #int_timer0 
.................... void isr_TMR0(void){ //Rutina de interrupcion 
....................    contador1++; 
00096:  INCF   16,F
....................    contador2++; 
00098:  INCF   17,F
....................    contador3++; 
0009A:  INCF   18,F
....................    contador4++; 
0009C:  INCF   19,F
....................     
....................    if(contador1 >= 6){ 
0009E:  MOVF   16,W
000A0:  SUBLW  05
000A2:  BC    00A8
....................       contador1 = 0; 
000A4:  CLRF   16
....................       banderaA = 1; 
000A6:  BSF    1E.0
....................    } 
....................    if(contador2 >= 32){ 
000A8:  MOVF   17,W
000AA:  SUBLW  1F
000AC:  BC    00B2
....................       contador2 = 0; 
000AE:  CLRF   17
....................       banderaB = 1; 
000B0:  BSF    1E.1
....................    } 
....................    if(contador3 >= 61){ 
000B2:  MOVF   18,W
000B4:  SUBLW  3C
000B6:  BC    00BC
....................       contador3 = 0; 
000B8:  CLRF   18
....................       banderaC = 1; 
000BA:  BSF    1E.2
....................    } 
....................    if(contador4 >= 91){ 
000BC:  MOVF   19,W
000BE:  SUBLW  5A
000C0:  BC    00C6
....................       contador4 = 0; 
000C2:  CLRF   19
....................       banderaD = 1; 
000C4:  BSF    1E.3
....................    } 
....................     
....................    /* 
....................    if (contadorUno == 10){ //Cuando pasa 10 veces 10 ms son 100 ms 
....................       banderaContador = 1; //Se activa la bandera 
....................       set_timer0(144); //Reinicia el tmr 
....................    }else{ 
....................       set_timer0(144); //Reinicia el tmr 
....................    }*/ 
....................     
000C6:  BCF    FF2.2
000C8:  GOTO   0054
.................... } 
....................     
....................  
....................  
.................... void main (void){ 
000CC:  CLRF   FF8
000CE:  BCF    FD0.7
000D0:  BSF    07.7
000D2:  CLRF   16
000D4:  CLRF   17
000D6:  CLRF   18
000D8:  CLRF   19
000DA:  MOVLW  01
000DC:  MOVWF  1A
000DE:  MOVWF  1B
000E0:  MOVWF  1C
000E2:  MOVWF  1D
000E4:  BCF    1E.0
000E6:  BCF    1E.1
000E8:  BCF    1E.2
000EA:  BCF    1E.3
000EC:  MOVF   FC1,W
000EE:  ANDLW  C0
000F0:  IORLW  0F
000F2:  MOVWF  FC1
000F4:  MOVLW  07
000F6:  MOVWF  FB4
....................  
....................    SETUP_OSCILLATOR(OSC_16MHZ); 
000F8:  MOVLW  60
000FA:  MOVWF  FD3
000FC:  MOVLW  40
000FE:  MOVWF  F9B
00100:  MOVF   FD3,W
....................    SETUP_ADC_PORTS(NO_ANALOGS); 
00102:  MOVF   FC1,W
00104:  ANDLW  C0
00106:  IORLW  0F
00108:  MOVWF  FC1
....................     
....................    SET_TIMER0(0); //Valor de TMR 
0010A:  CLRF   FD7
0010C:  CLRF   FD6
....................     
....................    //Habilita interrupciones 
....................    ENABLE_INTERRUPTS(GLOBAL); 
0010E:  MOVLW  C0
00110:  IORWF  FF2,F
....................    ENABLE_INTERRUPTS(INT_TIMER0); 
00112:  BSF    FF2.5
....................     
....................    //Configuracion TMR 
....................    SETUP_TIMER_0(RTCC_INTERNAL | RTCC_DIV_256 |T0_8_BIT); //Predivisor 
00114:  MOVLW  C7
00116:  MOVWF  FD5
....................     
....................    SET_TRIS_A(0x00); 
00118:  MOVLW  00
0011A:  MOVWF  F92
....................    SET_TRIS_B(0x00); 
0011C:  MOVWF  F93
....................    SET_TRIS_C(0x00); 
0011E:  MOVWF  F94
....................    SET_TRIS_D(0x00); 
00120:  MOVWF  F95
....................     
....................    while(true){ 
....................       /*output_a(0xFF); 
....................       output_b(0xFF); 
....................       output_c(0xFF); 
....................       output_d(0xFF); 
....................       */ 
....................       if(banderaA){ 
00122:  BTFSS  1E.0
00124:  BRA    0134
....................          banderaA = 0; 
00126:  BCF    1E.0
....................   
....................          anilloA <<= 1; 
00128:  BCF    FD8.0
0012A:  RLCF   1A,F
....................          if(anilloA == 0){ 
0012C:  MOVF   1A,F
0012E:  BNZ   0134
....................             anilloA = 1; 
00130:  MOVLW  01
00132:  MOVWF  1A
....................          } 
....................       } 
....................        
....................       if(banderaB){ 
00134:  BTFSS  1E.1
00136:  BRA    0146
....................          banderaB = 0; 
00138:  BCF    1E.1
....................           
....................          anilloB <<= 1; 
0013A:  BCF    FD8.0
0013C:  RLCF   1B,F
....................          if(anilloB == 0){ 
0013E:  MOVF   1B,F
00140:  BNZ   0146
....................             anilloB = 1; 
00142:  MOVLW  01
00144:  MOVWF  1B
....................          } 
....................       } 
....................       if(banderaC){ 
00146:  BTFSS  1E.2
00148:  BRA    0158
....................          banderaC = 0; 
0014A:  BCF    1E.2
....................           
....................          anilloC <<= 1; 
0014C:  BCF    FD8.0
0014E:  RLCF   1C,F
....................          if(anilloC == 0){ 
00150:  MOVF   1C,F
00152:  BNZ   0158
....................             anilloC = 1; 
00154:  MOVLW  01
00156:  MOVWF  1C
....................          } 
....................       } 
....................       if(banderaD){ 
00158:  BTFSS  1E.3
0015A:  BRA    016A
....................          banderaD = 0; 
0015C:  BCF    1E.3
....................           
....................          anilloD <<= 1; 
0015E:  BCF    FD8.0
00160:  RLCF   1D,F
....................          if(anilloD == 0){ 
00162:  MOVF   1D,F
00164:  BNZ   016A
....................             anilloD = 1; 
00166:  MOVLW  01
00168:  MOVWF  1D
....................          } 
....................       } 
....................        
....................       /* 
....................       if(banderaContador){ //Si han pasado 100 ms 
....................          puertoA <<= 1; 
....................          contadorDos ++;  
....................          banderaContador = 0; //Limpia la bandera 
....................          if(contadorDos == 5){ //Si han pasado 500 ms 
....................             puertoB <<= 1; 
....................             contadorTres ++; 
....................             contadorCuatro ++; 
....................             contadorDos = 0; 
....................             if(contadorTres == 2){ //Si han pasado 1000 ms 
....................             puertoC <<= 1; 
....................             contadorTres = 0; 
....................             } 
....................             if(contadorCuatro == 3){ //Si han pasado 1500 ms 
....................             puertoD <<= 1; 
....................             contadorCuatro = 0; 
....................             } 
....................          } 
....................       } 
....................       */ 
....................       output_a(anilloA); 
0016A:  MOVFF  1A,F89
....................       output_b(anilloB); 
0016E:  MOVFF  1B,F8A
....................       output_c(anilloC); 
00172:  MOVFF  1C,F8B
....................       output_d(anilloD); 
00176:  MOVFF  1D,F8C
0017A:  BRA    0122
....................        
....................    } 
.................... } 
....................  
0017C:  SLEEP 
....................  

Configuration Fuses:
   Word  1: 0100   XT NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
